@using Nop.Core.Domain.Common
@using Nop.Core.Domain.Seo
@using Nop.Core.Events
@using Nop.Services.Security
@using Nop.Web.Framework.Events
@using Nop.Core
@using Nop.Core.Configuration
@inject CommonSettings commonSettings
@inject IEventPublisher eventPublisher
@inject IPermissionService permissionService
@inject IWorkContext workContext
@inject IThemeContext themeContext
@inject SeoSettings seoSettings
@inject AppSettings appSettings
@inject IStoreContext storeContext
@inject ISettingService settingService
@inject Nop.Services.Localization.ILanguageService languageService
@{
    Html.AppendScriptParts(ResourceLocation.Footer, "~/js/public.countryselect.js");
    Html.AppendScriptParts(ResourceLocation.Footer, "~/js/public.ajaxcart.js");
    Html.AppendScriptParts(ResourceLocation.Footer, "~/js/public.common.js");
    //when jQuery migrate script logging is active you will see the log in the browser console

    var iosFixFilePath = "~/Plugins/SevenSpikes.Core/Scripts/iOS-12-array-reverse-fix.min.js";
    var iosFixContentFilePath = CommonHelper.DefaultFileProvider.MapPath(iosFixFilePath);

    if(System.IO.File.Exists(iosFixContentFilePath))
    {        
	    Html.AppendScriptParts(ResourceLocation.Footer, iosFixFilePath);
    }

    if (commonSettings.JqueryMigrateScriptLoggingActive)
    {
        Html.AppendScriptParts(ResourceLocation.Footer, "~/lib_npm/jquery-migrate/jquery-migrate.js");
    }
    else
    {
        Html.AppendScriptParts(ResourceLocation.Footer, "~/lib_npm/jquery-migrate/jquery-migrate.min.js");
    }
    Html.AppendScriptParts(ResourceLocation.Footer, "~/lib_npm/jquery-ui-dist/jquery-ui.min.js");
    Html.AppendScriptParts(ResourceLocation.Footer, "~/lib_npm/jquery-validation-unobtrusive/jquery.validate.unobtrusive.min.js");
    Html.AppendScriptParts(ResourceLocation.Footer, "~/lib_npm/jquery-validation/jquery.validate.min.js");
    Html.AppendScriptParts(ResourceLocation.Footer, "~/lib_npm/jquery/jquery.min.js");

    //custom tag(s);
    if (!string.IsNullOrEmpty(seoSettings.CustomHeadTags))
    {
        Html.AppendHeadCustomParts(seoSettings.CustomHeadTags);
    }
    
    var storeId = (await storeContext.GetCurrentStoreAsync()).Id;

    var displayMiniProfiler = appSettings.CommonConfig.MiniProfilerEnabled && await permissionService.AuthorizeAsync(StandardPermissionProvider.AccessProfiling);

    var userAgent = Url.ActionContext.HttpContext.Request.Headers["User-Agent"];
    if (!string.IsNullOrEmpty(userAgent) && userAgent.ToString().ToLower().IndexOf("MSIE 8.0", StringComparison.InvariantCultureIgnoreCase) > 0)
    {
        Html.AppendHeadCustomParts("<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"/>");
    }

    var currentPageClass = (await (await Html.PartialAsync("_CurrentPageClass")).RenderHtmlContentAsync()).Trim();
    var itemBoxTypeClass = (await settingService.GetSettingByKeyAsync("prismathemesettings.ItemBoxType", "item-type-1", storeId, true)).ToLowerInvariant();
    var fontFamilyClass = (await settingService.GetSettingByKeyAsync("prismathemesettings.FontFamily", "comfortaa", storeId, true)).ToLowerInvariant();

    //event
    await eventPublisher.PublishAsync(new PageRenderingEvent(this.Html));
}
<!DOCTYPE html>
<html lang="@languageService.GetTwoLetterIsoLanguageName(await workContext.GetWorkingLanguageAsync())" @(await this.ShouldUseRtlThemeAsync() ? Html.Raw(" dir=\"rtl\"") : null) @Html.NopPageCssClasses()>
    <head>
        <title>@Html.NopTitle()</title>
        <meta http-equiv="Content-type" content="text/html;charset=UTF-8" />
        <meta name="description" content="@(Html.NopMetaDescription())" />
        <meta name="keywords" content="@(Html.NopMetaKeywords())" />
        <meta name="generator" content="nopCommerce" />
    	<meta name="viewport" content="width=device-width, initial-scale=1" />
        @Html.NopHeadCustom()
        @*This is used so that themes can inject content into the header*@
        @await Html.PartialAsync("Head")
   	@await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.HeadHtmlTag })
        @await Component.InvokeAsync("Widget", new { widgetZone = "head_html_tag_after_css_files_prisma"})
	@Html.NopCssFiles(ResourceLocation.Head)
	@Html.NopScripts(ResourceLocation.Head)
        @Html.NopCanonicalUrls()
        @await Component.InvokeAsync("NewsRssHeaderLink")
        @await Component.InvokeAsync("BlogRssHeaderLink")
    	@*Insert favicon and app icons head code*@
        @await Component.InvokeAsync("Favicon")
        @if (displayMiniProfiler)
        {
            <mini-profiler />
        }
    	@Html.NopInlineScripts(ResourceLocation.Head)
        <link rel="preload" as="font" href="@Url.Content($"~/Themes/{await themeContext.GetWorkingThemeNameAsync()}/Content/font/prisma.woff")" crossorigin>
        <link href="https://fonts.googleapis.com/css?family=Comfortaa:400,700|Fira+Sans:400,700|Open+Sans:400,700|Playfair+Display:400,700&amp;subset=cyrillic,cyrillic-ext,greek,greek-ext,latin-ext&display=swap" rel="stylesheet">
        <!--Powered by nopCommerce - https://www.nopCommerce.com-->
    </head>
    <body class="@currentPageClass font-@fontFamilyClass @itemBoxTypeClass">
    	@RenderBody()
    	@Html.NopCssFiles(ResourceLocation.Footer)
    	@Html.NopScripts(ResourceLocation.Footer)
    	@Html.NopInlineScripts(ResourceLocation.Footer)
        <div class="scroll-back-button" id="goToTop"></div>
    </body>
</html>